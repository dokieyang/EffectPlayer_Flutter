// Copyright (c) 2025 Tencent. All rights reserved.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.tcmedia.tcmediax.tceffectplayer.tceffectplayer_flutter.messages;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class TCEffectMessages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /**
   * Pigeon original component, used to generate native communication code for `messages`.
   * The generation command is as follows. When using the generation command,
   * the two import statements above need to be implemented or commented out.
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class FTCEffectConfigMsg {
    private @Nullable Long codecTypeValue;

    public @Nullable Long getCodecTypeValue() {
      return codecTypeValue;
    }

    public void setCodecTypeValue(@Nullable Long setterArg) {
      this.codecTypeValue = setterArg;
    }

    private @Nullable Long freezeFrame;

    public @Nullable Long getFreezeFrame() {
      return freezeFrame;
    }

    public void setFreezeFrame(@Nullable Long setterArg) {
      this.freezeFrame = setterArg;
    }

    private @Nullable Long animTypeValue;

    public @Nullable Long getAnimTypeValue() {
      return animTypeValue;
    }

    public void setAnimTypeValue(@Nullable Long setterArg) {
      this.animTypeValue = setterArg;
    }

    private @Nullable Map<Object, Object> extendMapParams;

    public @Nullable Map<Object, Object> getExtendMapParams() {
      return extendMapParams;
    }

    public void setExtendMapParams(@Nullable Map<Object, Object> setterArg) {
      this.extendMapParams = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTCEffectConfigMsg that = (FTCEffectConfigMsg) o;
      return Objects.equals(codecTypeValue, that.codecTypeValue) && Objects.equals(freezeFrame, that.freezeFrame) && Objects.equals(animTypeValue, that.animTypeValue) && Objects.equals(extendMapParams, that.extendMapParams);
    }

    @Override
    public int hashCode() {
      return Objects.hash(codecTypeValue, freezeFrame, animTypeValue, extendMapParams);
    }

    public static final class Builder {

      private @Nullable Long codecTypeValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setCodecTypeValue(@Nullable Long setterArg) {
        this.codecTypeValue = setterArg;
        return this;
      }

      private @Nullable Long freezeFrame;

      @CanIgnoreReturnValue
      public @NonNull Builder setFreezeFrame(@Nullable Long setterArg) {
        this.freezeFrame = setterArg;
        return this;
      }

      private @Nullable Long animTypeValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnimTypeValue(@Nullable Long setterArg) {
        this.animTypeValue = setterArg;
        return this;
      }

      private @Nullable Map<Object, Object> extendMapParams;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtendMapParams(@Nullable Map<Object, Object> setterArg) {
        this.extendMapParams = setterArg;
        return this;
      }

      public @NonNull FTCEffectConfigMsg build() {
        FTCEffectConfigMsg pigeonReturn = new FTCEffectConfigMsg();
        pigeonReturn.setCodecTypeValue(codecTypeValue);
        pigeonReturn.setFreezeFrame(freezeFrame);
        pigeonReturn.setAnimTypeValue(animTypeValue);
        pigeonReturn.setExtendMapParams(extendMapParams);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(codecTypeValue);
      toListResult.add(freezeFrame);
      toListResult.add(animTypeValue);
      toListResult.add(extendMapParams);
      return toListResult;
    }

    static @NonNull FTCEffectConfigMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FTCEffectConfigMsg pigeonResult = new FTCEffectConfigMsg();
      Object codecTypeValue = pigeonVar_list.get(0);
      pigeonResult.setCodecTypeValue((Long) codecTypeValue);
      Object freezeFrame = pigeonVar_list.get(1);
      pigeonResult.setFreezeFrame((Long) freezeFrame);
      Object animTypeValue = pigeonVar_list.get(2);
      pigeonResult.setAnimTypeValue((Long) animTypeValue);
      Object extendMapParams = pigeonVar_list.get(3);
      pigeonResult.setExtendMapParams((Map<Object, Object>) extendMapParams);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTCEffectAnimInfoMsg {
    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long duration;

    public @Nullable Long getDuration() {
      return duration;
    }

    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable Long width;

    public @Nullable Long getWidth() {
      return width;
    }

    public void setWidth(@Nullable Long setterArg) {
      this.width = setterArg;
    }

    private @Nullable Long height;

    public @Nullable Long getHeight() {
      return height;
    }

    public void setHeight(@Nullable Long setterArg) {
      this.height = setterArg;
    }

    private @Nullable Long encryptLevel;

    public @Nullable Long getEncryptLevel() {
      return encryptLevel;
    }

    public void setEncryptLevel(@Nullable Long setterArg) {
      this.encryptLevel = setterArg;
    }

    private @Nullable FMixInfoMsg mixInfo;

    public @Nullable FMixInfoMsg getMixInfo() {
      return mixInfo;
    }

    public void setMixInfo(@Nullable FMixInfoMsg setterArg) {
      this.mixInfo = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTCEffectAnimInfoMsg that = (FTCEffectAnimInfoMsg) o;
      return Objects.equals(type, that.type) && Objects.equals(duration, that.duration) && Objects.equals(width, that.width) && Objects.equals(height, that.height) && Objects.equals(encryptLevel, that.encryptLevel) && Objects.equals(mixInfo, that.mixInfo);
    }

    @Override
    public int hashCode() {
      return Objects.hash(type, duration, width, height, encryptLevel, mixInfo);
    }

    public static final class Builder {

      private @Nullable Long type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Long duration;

      @CanIgnoreReturnValue
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@Nullable Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@Nullable Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Long encryptLevel;

      @CanIgnoreReturnValue
      public @NonNull Builder setEncryptLevel(@Nullable Long setterArg) {
        this.encryptLevel = setterArg;
        return this;
      }

      private @Nullable FMixInfoMsg mixInfo;

      @CanIgnoreReturnValue
      public @NonNull Builder setMixInfo(@Nullable FMixInfoMsg setterArg) {
        this.mixInfo = setterArg;
        return this;
      }

      public @NonNull FTCEffectAnimInfoMsg build() {
        FTCEffectAnimInfoMsg pigeonReturn = new FTCEffectAnimInfoMsg();
        pigeonReturn.setType(type);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setEncryptLevel(encryptLevel);
        pigeonReturn.setMixInfo(mixInfo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(6);
      toListResult.add(type);
      toListResult.add(duration);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(encryptLevel);
      toListResult.add(mixInfo);
      return toListResult;
    }

    static @NonNull FTCEffectAnimInfoMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FTCEffectAnimInfoMsg pigeonResult = new FTCEffectAnimInfoMsg();
      Object type = pigeonVar_list.get(0);
      pigeonResult.setType((Long) type);
      Object duration = pigeonVar_list.get(1);
      pigeonResult.setDuration((Long) duration);
      Object width = pigeonVar_list.get(2);
      pigeonResult.setWidth((Long) width);
      Object height = pigeonVar_list.get(3);
      pigeonResult.setHeight((Long) height);
      Object encryptLevel = pigeonVar_list.get(4);
      pigeonResult.setEncryptLevel((Long) encryptLevel);
      Object mixInfo = pigeonVar_list.get(5);
      pigeonResult.setMixInfo((FMixInfoMsg) mixInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FMixInfoMsg {
    private @Nullable List<FMixItemMsg> textMixItemList;

    public @Nullable List<FMixItemMsg> getTextMixItemList() {
      return textMixItemList;
    }

    public void setTextMixItemList(@Nullable List<FMixItemMsg> setterArg) {
      this.textMixItemList = setterArg;
    }

    private @Nullable List<FMixItemMsg> imageMixItemList;

    public @Nullable List<FMixItemMsg> getImageMixItemList() {
      return imageMixItemList;
    }

    public void setImageMixItemList(@Nullable List<FMixItemMsg> setterArg) {
      this.imageMixItemList = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FMixInfoMsg that = (FMixInfoMsg) o;
      return Objects.equals(textMixItemList, that.textMixItemList) && Objects.equals(imageMixItemList, that.imageMixItemList);
    }

    @Override
    public int hashCode() {
      return Objects.hash(textMixItemList, imageMixItemList);
    }

    public static final class Builder {

      private @Nullable List<FMixItemMsg> textMixItemList;

      @CanIgnoreReturnValue
      public @NonNull Builder setTextMixItemList(@Nullable List<FMixItemMsg> setterArg) {
        this.textMixItemList = setterArg;
        return this;
      }

      private @Nullable List<FMixItemMsg> imageMixItemList;

      @CanIgnoreReturnValue
      public @NonNull Builder setImageMixItemList(@Nullable List<FMixItemMsg> setterArg) {
        this.imageMixItemList = setterArg;
        return this;
      }

      public @NonNull FMixInfoMsg build() {
        FMixInfoMsg pigeonReturn = new FMixInfoMsg();
        pigeonReturn.setTextMixItemList(textMixItemList);
        pigeonReturn.setImageMixItemList(imageMixItemList);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(textMixItemList);
      toListResult.add(imageMixItemList);
      return toListResult;
    }

    static @NonNull FMixInfoMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FMixInfoMsg pigeonResult = new FMixInfoMsg();
      Object textMixItemList = pigeonVar_list.get(0);
      pigeonResult.setTextMixItemList((List<FMixItemMsg>) textMixItemList);
      Object imageMixItemList = pigeonVar_list.get(1);
      pigeonResult.setImageMixItemList((List<FMixItemMsg>) imageMixItemList);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FMixItemMsg {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String tag;

    public @Nullable String getTag() {
      return tag;
    }

    public void setTag(@Nullable String setterArg) {
      this.tag = setterArg;
    }

    private @Nullable String text;

    public @Nullable String getText() {
      return text;
    }

    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FMixItemMsg that = (FMixItemMsg) o;
      return Objects.equals(id, that.id) && Objects.equals(tag, that.tag) && Objects.equals(text, that.text);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, tag, text);
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String tag;

      @CanIgnoreReturnValue
      public @NonNull Builder setTag(@Nullable String setterArg) {
        this.tag = setterArg;
        return this;
      }

      private @Nullable String text;

      @CanIgnoreReturnValue
      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }

      public @NonNull FMixItemMsg build() {
        FMixItemMsg pigeonReturn = new FMixItemMsg();
        pigeonReturn.setId(id);
        pigeonReturn.setTag(tag);
        pigeonReturn.setText(text);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(id);
      toListResult.add(tag);
      toListResult.add(text);
      return toListResult;
    }

    static @NonNull FMixItemMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FMixItemMsg pigeonResult = new FMixItemMsg();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      Object tag = pigeonVar_list.get(1);
      pigeonResult.setTag((String) tag);
      Object text = pigeonVar_list.get(2);
      pigeonResult.setText((String) text);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FResourceMsg {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String srcType;

    public @Nullable String getSrcType() {
      return srcType;
    }

    public void setSrcType(@Nullable String setterArg) {
      this.srcType = setterArg;
    }

    private @Nullable String loadType;

    public @Nullable String getLoadType() {
      return loadType;
    }

    public void setLoadType(@Nullable String setterArg) {
      this.loadType = setterArg;
    }

    private @Nullable String tag;

    public @Nullable String getTag() {
      return tag;
    }

    public void setTag(@Nullable String setterArg) {
      this.tag = setterArg;
    }

    private @Nullable byte[] bitmapByte;

    public @Nullable byte[] getBitmapByte() {
      return bitmapByte;
    }

    public void setBitmapByte(@Nullable byte[] setterArg) {
      this.bitmapByte = setterArg;
    }

    private @Nullable String text;

    public @Nullable String getText() {
      return text;
    }

    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FResourceMsg that = (FResourceMsg) o;
      return Objects.equals(id, that.id) && Objects.equals(srcType, that.srcType) && Objects.equals(loadType, that.loadType) && Objects.equals(tag, that.tag) && Arrays.equals(bitmapByte, that.bitmapByte) && Objects.equals(text, that.text);
    }

    @Override
    public int hashCode() {
      int pigeonVar_result = Objects.hash(id, srcType, loadType, tag, text);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(bitmapByte);
      return pigeonVar_result;
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String srcType;

      @CanIgnoreReturnValue
      public @NonNull Builder setSrcType(@Nullable String setterArg) {
        this.srcType = setterArg;
        return this;
      }

      private @Nullable String loadType;

      @CanIgnoreReturnValue
      public @NonNull Builder setLoadType(@Nullable String setterArg) {
        this.loadType = setterArg;
        return this;
      }

      private @Nullable String tag;

      @CanIgnoreReturnValue
      public @NonNull Builder setTag(@Nullable String setterArg) {
        this.tag = setterArg;
        return this;
      }

      private @Nullable byte[] bitmapByte;

      @CanIgnoreReturnValue
      public @NonNull Builder setBitmapByte(@Nullable byte[] setterArg) {
        this.bitmapByte = setterArg;
        return this;
      }

      private @Nullable String text;

      @CanIgnoreReturnValue
      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }

      public @NonNull FResourceMsg build() {
        FResourceMsg pigeonReturn = new FResourceMsg();
        pigeonReturn.setId(id);
        pigeonReturn.setSrcType(srcType);
        pigeonReturn.setLoadType(loadType);
        pigeonReturn.setTag(tag);
        pigeonReturn.setBitmapByte(bitmapByte);
        pigeonReturn.setText(text);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(6);
      toListResult.add(id);
      toListResult.add(srcType);
      toListResult.add(loadType);
      toListResult.add(tag);
      toListResult.add(bitmapByte);
      toListResult.add(text);
      return toListResult;
    }

    static @NonNull FResourceMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FResourceMsg pigeonResult = new FResourceMsg();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      Object srcType = pigeonVar_list.get(1);
      pigeonResult.setSrcType((String) srcType);
      Object loadType = pigeonVar_list.get(2);
      pigeonResult.setLoadType((String) loadType);
      Object tag = pigeonVar_list.get(3);
      pigeonResult.setTag((String) tag);
      Object bitmapByte = pigeonVar_list.get(4);
      pigeonResult.setBitmapByte((byte[]) bitmapByte);
      Object text = pigeonVar_list.get(5);
      pigeonResult.setText((String) text);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FTCEffectTextMsg {
    private @Nullable String text;

    public @Nullable String getText() {
      return text;
    }

    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    private @Nullable String fontStyle;

    public @Nullable String getFontStyle() {
      return fontStyle;
    }

    public void setFontStyle(@Nullable String setterArg) {
      this.fontStyle = setterArg;
    }

    private @Nullable Long color;

    public @Nullable Long getColor() {
      return color;
    }

    public void setColor(@Nullable Long setterArg) {
      this.color = setterArg;
    }

    private @Nullable Long alignment;

    public @Nullable Long getAlignment() {
      return alignment;
    }

    public void setAlignment(@Nullable Long setterArg) {
      this.alignment = setterArg;
    }

    private @Nullable Double fontSize;

    public @Nullable Double getFontSize() {
      return fontSize;
    }

    public void setFontSize(@Nullable Double setterArg) {
      this.fontSize = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      FTCEffectTextMsg that = (FTCEffectTextMsg) o;
      return Objects.equals(text, that.text) && Objects.equals(fontStyle, that.fontStyle) && Objects.equals(color, that.color) && Objects.equals(alignment, that.alignment) && Objects.equals(fontSize, that.fontSize);
    }

    @Override
    public int hashCode() {
      return Objects.hash(text, fontStyle, color, alignment, fontSize);
    }

    public static final class Builder {

      private @Nullable String text;

      @CanIgnoreReturnValue
      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }

      private @Nullable String fontStyle;

      @CanIgnoreReturnValue
      public @NonNull Builder setFontStyle(@Nullable String setterArg) {
        this.fontStyle = setterArg;
        return this;
      }

      private @Nullable Long color;

      @CanIgnoreReturnValue
      public @NonNull Builder setColor(@Nullable Long setterArg) {
        this.color = setterArg;
        return this;
      }

      private @Nullable Long alignment;

      @CanIgnoreReturnValue
      public @NonNull Builder setAlignment(@Nullable Long setterArg) {
        this.alignment = setterArg;
        return this;
      }

      private @Nullable Double fontSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setFontSize(@Nullable Double setterArg) {
        this.fontSize = setterArg;
        return this;
      }

      public @NonNull FTCEffectTextMsg build() {
        FTCEffectTextMsg pigeonReturn = new FTCEffectTextMsg();
        pigeonReturn.setText(text);
        pigeonReturn.setFontStyle(fontStyle);
        pigeonReturn.setColor(color);
        pigeonReturn.setAlignment(alignment);
        pigeonReturn.setFontSize(fontSize);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(5);
      toListResult.add(text);
      toListResult.add(fontStyle);
      toListResult.add(color);
      toListResult.add(alignment);
      toListResult.add(fontSize);
      return toListResult;
    }

    static @NonNull FTCEffectTextMsg fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      FTCEffectTextMsg pigeonResult = new FTCEffectTextMsg();
      Object text = pigeonVar_list.get(0);
      pigeonResult.setText((String) text);
      Object fontStyle = pigeonVar_list.get(1);
      pigeonResult.setFontStyle((String) fontStyle);
      Object color = pigeonVar_list.get(2);
      pigeonResult.setColor((Long) color);
      Object alignment = pigeonVar_list.get(3);
      pigeonResult.setAlignment((Long) alignment);
      Object fontSize = pigeonVar_list.get(4);
      pigeonResult.setFontSize((Double) fontSize);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return FTCEffectConfigMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return FTCEffectAnimInfoMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return FMixInfoMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return FMixItemMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return FResourceMsg.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return FTCEffectTextMsg.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof FTCEffectConfigMsg) {
        stream.write(129);
        writeValue(stream, ((FTCEffectConfigMsg) value).toList());
      } else if (value instanceof FTCEffectAnimInfoMsg) {
        stream.write(130);
        writeValue(stream, ((FTCEffectAnimInfoMsg) value).toList());
      } else if (value instanceof FMixInfoMsg) {
        stream.write(131);
        writeValue(stream, ((FMixInfoMsg) value).toList());
      } else if (value instanceof FMixItemMsg) {
        stream.write(132);
        writeValue(stream, ((FMixItemMsg) value).toList());
      } else if (value instanceof FResourceMsg) {
        stream.write(133);
        writeValue(stream, ((FResourceMsg) value).toList());
      } else if (value instanceof FTCEffectTextMsg) {
        stream.write(134);
        writeValue(stream, ((FTCEffectTextMsg) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FTCMediaXBaseApi {

    void setLicense(@NonNull String url, @NonNull String key);

    void setLogEnable(@NonNull Boolean enable);

    /** The codec used by FTCMediaXBaseApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `FTCMediaXBaseApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FTCMediaXBaseApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FTCMediaXBaseApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLicense" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String urlArg = (String) args.get(0);
                String keyArg = (String) args.get(1);
                try {
                  api.setLicense(urlArg, keyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLogEnable" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableArg = (Boolean) args.get(0);
                try {
                  api.setLogEnable(enableArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FTCEffectAnimViewApi {

    @NonNull 
    Long startPlay(@NonNull String playUrl);

    void setVideoMode(@NonNull Long videoModeValue);

    void setConfig(@NonNull FTCEffectConfigMsg config);

    void setScaleType(@NonNull Long scaleTypeValue);

    void requestUpdateResource();

    void setRenderRotation(@NonNull Long rotation);

    @NonNull 
    Boolean isPlaying();

    void resume();

    void pause();

    void seekTo(@NonNull Long milliSec);

    void seekProgress(@NonNull Double progress);

    void setLoop(@NonNull Boolean isLoop);

    void setLoopCount(@NonNull Long loopCount);

    void setDuration(@NonNull Long durationInMilliSec);

    void stopPlay(@NonNull Boolean clearLastFrame);

    void setMute(@NonNull Boolean mute);

    @NonNull 
    FTCEffectAnimInfoMsg getTCAnimInfo();

    void onDestroy();

    void setRate(@NonNull Double rate);

    /** The codec used by FTCEffectAnimViewApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `FTCEffectAnimViewApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FTCEffectAnimViewApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable FTCEffectAnimViewApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.startPlay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playUrlArg = (String) args.get(0);
                try {
                  Long output = api.startPlay(playUrlArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setVideoMode" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long videoModeValueArg = (Long) args.get(0);
                try {
                  api.setVideoMode(videoModeValueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setConfig" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                FTCEffectConfigMsg configArg = (FTCEffectConfigMsg) args.get(0);
                try {
                  api.setConfig(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setScaleType" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long scaleTypeValueArg = (Long) args.get(0);
                try {
                  api.setScaleType(scaleTypeValueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.requestUpdateResource" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.requestUpdateResource();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRenderRotation" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long rotationArg = (Long) args.get(0);
                try {
                  api.setRenderRotation(rotationArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.isPlaying" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  Boolean output = api.isPlaying();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.resume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.resume();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.pause();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekTo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long milliSecArg = (Long) args.get(0);
                try {
                  api.seekTo(milliSecArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekProgress" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double progressArg = (Double) args.get(0);
                try {
                  api.seekProgress(progressArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoop" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean isLoopArg = (Boolean) args.get(0);
                try {
                  api.setLoop(isLoopArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoopCount" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long loopCountArg = (Long) args.get(0);
                try {
                  api.setLoopCount(loopCountArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setDuration" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long durationInMilliSecArg = (Long) args.get(0);
                try {
                  api.setDuration(durationInMilliSecArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.stopPlay" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean clearLastFrameArg = (Boolean) args.get(0);
                try {
                  api.stopPlay(clearLastFrameArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setMute" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean muteArg = (Boolean) args.get(0);
                try {
                  api.setMute(muteArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.getTCAnimInfo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  FTCEffectAnimInfoMsg output = api.getTCAnimInfo();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.onDestroy" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.onDestroy();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRate" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double rateArg = (Double) args.get(0);
                try {
                  api.setRate(rateArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FTCMediaXBaseFlutterEvent {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public FTCMediaXBaseFlutterEvent(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public FTCMediaXBaseFlutterEvent(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by FTCMediaXBaseFlutterEvent.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void onLicenseResult(@NonNull Long errCodeArg, @NonNull String msgArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(errCodeArg, msgArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FTCEffectAnimViewFlutterEvent {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public FTCEffectAnimViewFlutterEvent(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public FTCEffectAnimViewFlutterEvent(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by FTCEffectAnimViewFlutterEvent.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void fetchImage(@NonNull FResourceMsg resArg, @NonNull NullableResult<byte[]> result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchImage" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(resArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                @SuppressWarnings("ConstantConditions")
                byte[] output = (byte[]) listReply.get(0);
                result.success(output);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void fetchText(@NonNull FResourceMsg resArg, @NonNull NullableResult<FTCEffectTextMsg> result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchText" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(resArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                @SuppressWarnings("ConstantConditions")
                FTCEffectTextMsg output = (FTCEffectTextMsg) listReply.get(0);
                result.success(output);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void releaseResource(@NonNull List<FResourceMsg> resourceListArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.releaseResource" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(resourceListArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onResClick(@NonNull FResourceMsg resArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onResClick" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(resArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlayStart(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayStart" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlayEnd(@NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEnd" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlayError(@NonNull Long errCodeArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayError" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(errCodeArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlayEvent(@NonNull Long eventArg, @NonNull Map<Object, Object> paramArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(eventArg, paramArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
