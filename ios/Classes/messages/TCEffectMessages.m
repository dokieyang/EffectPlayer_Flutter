// Copyright (c) 2025 Tencent. All rights reserved.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "TCEffectMessages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FTCEffectConfigMsg ()
+ (FTCEffectConfigMsg *)fromList:(NSArray<id> *)list;
+ (nullable FTCEffectConfigMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FTCEffectAnimInfoMsg ()
+ (FTCEffectAnimInfoMsg *)fromList:(NSArray<id> *)list;
+ (nullable FTCEffectAnimInfoMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FMixInfoMsg ()
+ (FMixInfoMsg *)fromList:(NSArray<id> *)list;
+ (nullable FMixInfoMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FMixItemMsg ()
+ (FMixItemMsg *)fromList:(NSArray<id> *)list;
+ (nullable FMixItemMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FResourceMsg ()
+ (FResourceMsg *)fromList:(NSArray<id> *)list;
+ (nullable FResourceMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FTCEffectTextMsg ()
+ (FTCEffectTextMsg *)fromList:(NSArray<id> *)list;
+ (nullable FTCEffectTextMsg *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation FTCEffectConfigMsg
+ (instancetype)makeWithCodecTypeValue:(nullable NSNumber *)codecTypeValue
    freezeFrame:(nullable NSNumber *)freezeFrame
    animTypeValue:(nullable NSNumber *)animTypeValue
    extendMapParams:(nullable NSDictionary *)extendMapParams {
  FTCEffectConfigMsg* pigeonResult = [[FTCEffectConfigMsg alloc] init];
  pigeonResult.codecTypeValue = codecTypeValue;
  pigeonResult.freezeFrame = freezeFrame;
  pigeonResult.animTypeValue = animTypeValue;
  pigeonResult.extendMapParams = extendMapParams;
  return pigeonResult;
}
+ (FTCEffectConfigMsg *)fromList:(NSArray<id> *)list {
  FTCEffectConfigMsg *pigeonResult = [[FTCEffectConfigMsg alloc] init];
  pigeonResult.codecTypeValue = GetNullableObjectAtIndex(list, 0);
  pigeonResult.freezeFrame = GetNullableObjectAtIndex(list, 1);
  pigeonResult.animTypeValue = GetNullableObjectAtIndex(list, 2);
  pigeonResult.extendMapParams = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable FTCEffectConfigMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FTCEffectConfigMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.codecTypeValue ?: [NSNull null],
    self.freezeFrame ?: [NSNull null],
    self.animTypeValue ?: [NSNull null],
    self.extendMapParams ?: [NSNull null],
  ];
}
@end

@implementation FTCEffectAnimInfoMsg
+ (instancetype)makeWithType:(nullable NSNumber *)type
    duration:(nullable NSNumber *)duration
    width:(nullable NSNumber *)width
    height:(nullable NSNumber *)height
    encryptLevel:(nullable NSNumber *)encryptLevel
    mixInfo:(nullable FMixInfoMsg *)mixInfo {
  FTCEffectAnimInfoMsg* pigeonResult = [[FTCEffectAnimInfoMsg alloc] init];
  pigeonResult.type = type;
  pigeonResult.duration = duration;
  pigeonResult.width = width;
  pigeonResult.height = height;
  pigeonResult.encryptLevel = encryptLevel;
  pigeonResult.mixInfo = mixInfo;
  return pigeonResult;
}
+ (FTCEffectAnimInfoMsg *)fromList:(NSArray<id> *)list {
  FTCEffectAnimInfoMsg *pigeonResult = [[FTCEffectAnimInfoMsg alloc] init];
  pigeonResult.type = GetNullableObjectAtIndex(list, 0);
  pigeonResult.duration = GetNullableObjectAtIndex(list, 1);
  pigeonResult.width = GetNullableObjectAtIndex(list, 2);
  pigeonResult.height = GetNullableObjectAtIndex(list, 3);
  pigeonResult.encryptLevel = GetNullableObjectAtIndex(list, 4);
  pigeonResult.mixInfo = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable FTCEffectAnimInfoMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FTCEffectAnimInfoMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.type ?: [NSNull null],
    self.duration ?: [NSNull null],
    self.width ?: [NSNull null],
    self.height ?: [NSNull null],
    self.encryptLevel ?: [NSNull null],
    self.mixInfo ?: [NSNull null],
  ];
}
@end

@implementation FMixInfoMsg
+ (instancetype)makeWithTextMixItemList:(nullable NSArray<FMixItemMsg *> *)textMixItemList
    imageMixItemList:(nullable NSArray<FMixItemMsg *> *)imageMixItemList {
  FMixInfoMsg* pigeonResult = [[FMixInfoMsg alloc] init];
  pigeonResult.textMixItemList = textMixItemList;
  pigeonResult.imageMixItemList = imageMixItemList;
  return pigeonResult;
}
+ (FMixInfoMsg *)fromList:(NSArray<id> *)list {
  FMixInfoMsg *pigeonResult = [[FMixInfoMsg alloc] init];
  pigeonResult.textMixItemList = GetNullableObjectAtIndex(list, 0);
  pigeonResult.imageMixItemList = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FMixInfoMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FMixInfoMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.textMixItemList ?: [NSNull null],
    self.imageMixItemList ?: [NSNull null],
  ];
}
@end

@implementation FMixItemMsg
+ (instancetype)makeWithId:(nullable NSString *)id
    tag:(nullable NSString *)tag
    text:(nullable NSString *)text {
  FMixItemMsg* pigeonResult = [[FMixItemMsg alloc] init];
  pigeonResult.id = id;
  pigeonResult.tag = tag;
  pigeonResult.text = text;
  return pigeonResult;
}
+ (FMixItemMsg *)fromList:(NSArray<id> *)list {
  FMixItemMsg *pigeonResult = [[FMixItemMsg alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.tag = GetNullableObjectAtIndex(list, 1);
  pigeonResult.text = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FMixItemMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FMixItemMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.tag ?: [NSNull null],
    self.text ?: [NSNull null],
  ];
}
@end

@implementation FResourceMsg
+ (instancetype)makeWithId:(nullable NSString *)id
    srcType:(nullable NSString *)srcType
    loadType:(nullable NSString *)loadType
    tag:(nullable NSString *)tag
    bitmapByte:(nullable FlutterStandardTypedData *)bitmapByte
    text:(nullable NSString *)text {
  FResourceMsg* pigeonResult = [[FResourceMsg alloc] init];
  pigeonResult.id = id;
  pigeonResult.srcType = srcType;
  pigeonResult.loadType = loadType;
  pigeonResult.tag = tag;
  pigeonResult.bitmapByte = bitmapByte;
  pigeonResult.text = text;
  return pigeonResult;
}
+ (FResourceMsg *)fromList:(NSArray<id> *)list {
  FResourceMsg *pigeonResult = [[FResourceMsg alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.srcType = GetNullableObjectAtIndex(list, 1);
  pigeonResult.loadType = GetNullableObjectAtIndex(list, 2);
  pigeonResult.tag = GetNullableObjectAtIndex(list, 3);
  pigeonResult.bitmapByte = GetNullableObjectAtIndex(list, 4);
  pigeonResult.text = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable FResourceMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FResourceMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.srcType ?: [NSNull null],
    self.loadType ?: [NSNull null],
    self.tag ?: [NSNull null],
    self.bitmapByte ?: [NSNull null],
    self.text ?: [NSNull null],
  ];
}
@end

@implementation FTCEffectTextMsg
+ (instancetype)makeWithText:(nullable NSString *)text
    fontStyle:(nullable NSString *)fontStyle
    color:(nullable NSNumber *)color
    alignment:(nullable NSNumber *)alignment
    fontSize:(nullable NSNumber *)fontSize {
  FTCEffectTextMsg* pigeonResult = [[FTCEffectTextMsg alloc] init];
  pigeonResult.text = text;
  pigeonResult.fontStyle = fontStyle;
  pigeonResult.color = color;
  pigeonResult.alignment = alignment;
  pigeonResult.fontSize = fontSize;
  return pigeonResult;
}
+ (FTCEffectTextMsg *)fromList:(NSArray<id> *)list {
  FTCEffectTextMsg *pigeonResult = [[FTCEffectTextMsg alloc] init];
  pigeonResult.text = GetNullableObjectAtIndex(list, 0);
  pigeonResult.fontStyle = GetNullableObjectAtIndex(list, 1);
  pigeonResult.color = GetNullableObjectAtIndex(list, 2);
  pigeonResult.alignment = GetNullableObjectAtIndex(list, 3);
  pigeonResult.fontSize = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable FTCEffectTextMsg *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FTCEffectTextMsg fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.text ?: [NSNull null],
    self.fontStyle ?: [NSNull null],
    self.color ?: [NSNull null],
    self.alignment ?: [NSNull null],
    self.fontSize ?: [NSNull null],
  ];
}
@end

@interface nullTCEffectMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation nullTCEffectMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [FTCEffectConfigMsg fromList:[self readValue]];
    case 130: 
      return [FTCEffectAnimInfoMsg fromList:[self readValue]];
    case 131: 
      return [FMixInfoMsg fromList:[self readValue]];
    case 132: 
      return [FMixItemMsg fromList:[self readValue]];
    case 133: 
      return [FResourceMsg fromList:[self readValue]];
    case 134: 
      return [FTCEffectTextMsg fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullTCEffectMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullTCEffectMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FTCEffectConfigMsg class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FTCEffectAnimInfoMsg class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FMixInfoMsg class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FMixItemMsg class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FResourceMsg class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FTCEffectTextMsg class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullTCEffectMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullTCEffectMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullTCEffectMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullTCEffectMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetTCEffectMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullTCEffectMessagesPigeonCodecReaderWriter *readerWriter = [[nullTCEffectMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFTCMediaXBaseApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTCMediaXBaseApi> *api) {
  SetUpFTCMediaXBaseApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFTCMediaXBaseApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTCMediaXBaseApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLicense", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLicenseUrl:key:error:)], @"FTCMediaXBaseApi api (%@) doesn't respond to @selector(setLicenseUrl:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setLicenseUrl:arg_url key:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLogEnable", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLogEnableEnable:error:)], @"FTCMediaXBaseApi api (%@) doesn't respond to @selector(setLogEnableEnable:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_enable = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setLogEnableEnable:arg_enable error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpFTCEffectAnimViewApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTCEffectAnimViewApi> *api) {
  SetUpFTCEffectAnimViewApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFTCEffectAnimViewApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FTCEffectAnimViewApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.startPlay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startPlayPlayUrl:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(startPlayPlayUrl:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_playUrl = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api startPlayPlayUrl:arg_playUrl error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setVideoMode", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVideoModeVideoModeValue:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setVideoModeVideoModeValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_videoModeValue = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setVideoModeVideoModeValue:arg_videoModeValue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setConfig", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setConfigConfig:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setConfigConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FTCEffectConfigMsg *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setConfigConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setScaleType", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setScaleTypeScaleTypeValue:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setScaleTypeScaleTypeValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_scaleTypeValue = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setScaleTypeScaleTypeValue:arg_scaleTypeValue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.requestUpdateResource", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestUpdateResourceWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(requestUpdateResourceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api requestUpdateResourceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRenderRotation", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRenderRotationRotation:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setRenderRotationRotation:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_rotation = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setRenderRotationRotation:arg_rotation error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.isPlaying", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isPlayingWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(isPlayingWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isPlayingWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.resume", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(resumeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resumeWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.pause", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(pauseWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekTo", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekToMilliSec:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(seekToMilliSec:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_milliSec = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api seekToMilliSec:arg_milliSec error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekProgress", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekProgressProgress:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(seekProgressProgress:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_progress = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api seekProgressProgress:arg_progress error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoop", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoopIsLoop:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setLoopIsLoop:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_isLoop = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setLoopIsLoop:arg_isLoop error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoopCount", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLoopCountLoopCount:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setLoopCountLoopCount:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_loopCount = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setLoopCountLoopCount:arg_loopCount error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setDuration", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDurationDurationInMilliSec:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setDurationDurationInMilliSec:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_durationInMilliSec = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api setDurationDurationInMilliSec:arg_durationInMilliSec error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.stopPlay", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopPlayClearLastFrame:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(stopPlayClearLastFrame:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_clearLastFrame = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api stopPlayClearLastFrame:arg_clearLastFrame error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setMute", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMuteMute:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setMuteMute:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_mute = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setMuteMute:arg_mute error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.getTCAnimInfo", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTCAnimInfoWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(getTCAnimInfoWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FTCEffectAnimInfoMsg *output = [api getTCAnimInfoWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.onDestroy", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onDestroyWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(onDestroyWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api onDestroyWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRate", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRateRate:error:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(setRateRate:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_rate = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api setRateRate:arg_rate error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.getSdkVersion", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetTCEffectMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSdkVersionWithError:)], @"FTCEffectAnimViewApi api (%@) doesn't respond to @selector(getSdkVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getSdkVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FTCMediaXBaseFlutterEvent ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FTCMediaXBaseFlutterEvent

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)onLicenseResultErrCode:(NSInteger)arg_errCode msg:(NSString *)arg_msg completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[@(arg_errCode), arg_msg ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

@interface FTCEffectAnimViewFlutterEvent ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation FTCEffectAnimViewFlutterEvent

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)fetchImageRes:(FResourceMsg *)arg_res completion:(void (^)(FlutterStandardTypedData *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchImage", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[arg_res ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        FlutterStandardTypedData *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)fetchTextRes:(FResourceMsg *)arg_res completion:(void (^)(FTCEffectTextMsg *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchText", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[arg_res ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        FTCEffectTextMsg *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)releaseResourceResourceList:(NSArray<FResourceMsg *> *)arg_resourceList completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.releaseResource", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[arg_resourceList ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onResClickRes:(FResourceMsg *)arg_res completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onResClick", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[arg_res ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onPlayStartWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayStart", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onPlayEndWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEnd", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onPlayErrorErrCode:(NSInteger)arg_errCode completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayError", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[@(arg_errCode)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onPlayEventEvent:(NSInteger)arg_event param:(NSDictionary *)arg_param completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetTCEffectMessagesCodec()];
  [channel sendMessage:@[@(arg_event), arg_param ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

