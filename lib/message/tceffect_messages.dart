// Copyright (c) 2025 Tencent. All rights reserved.
part of '../ftceffect_player.dart';
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Pigeon original component, used to generate native communication code for `messages`.
/// The generation command is as follows. When using the generation command,
/// the two import statements above need to be implemented or commented out.
///
class FTCEffectConfigMsg {
  FTCEffectConfigMsg({
    this.codecTypeValue,
    this.freezeFrame,
    this.animTypeValue,
    this.extendMapParams,
  });

  int? codecTypeValue;

  int? freezeFrame;

  int? animTypeValue;

  Map<Object?, Object?>? extendMapParams;

  Object encode() {
    return <Object?>[
      codecTypeValue,
      freezeFrame,
      animTypeValue,
      extendMapParams,
    ];
  }

  static FTCEffectConfigMsg decode(Object result) {
    result as List<Object?>;
    return FTCEffectConfigMsg(
      codecTypeValue: result[0] as int?,
      freezeFrame: result[1] as int?,
      animTypeValue: result[2] as int?,
      extendMapParams: result[3] as Map<Object?, Object?>?,
    );
  }
}

class FTCEffectAnimInfoMsg {
  FTCEffectAnimInfoMsg({
    this.type,
    this.duration,
    this.width,
    this.height,
    this.encryptLevel,
    this.mixInfo,
  });

  int? type;

  int? duration;

  int? width;

  int? height;

  int? encryptLevel;

  FMixInfoMsg? mixInfo;

  Object encode() {
    return <Object?>[
      type,
      duration,
      width,
      height,
      encryptLevel,
      mixInfo,
    ];
  }

  static FTCEffectAnimInfoMsg decode(Object result) {
    result as List<Object?>;
    return FTCEffectAnimInfoMsg(
      type: result[0] as int?,
      duration: result[1] as int?,
      width: result[2] as int?,
      height: result[3] as int?,
      encryptLevel: result[4] as int?,
      mixInfo: result[5] as FMixInfoMsg?,
    );
  }
}

class FMixInfoMsg {
  FMixInfoMsg({
    this.textMixItemList,
    this.imageMixItemList,
  });

  List<FMixItemMsg>? textMixItemList;

  List<FMixItemMsg>? imageMixItemList;

  Object encode() {
    return <Object?>[
      textMixItemList,
      imageMixItemList,
    ];
  }

  static FMixInfoMsg decode(Object result) {
    result as List<Object?>;
    return FMixInfoMsg(
      textMixItemList: (result[0] as List<Object?>?)?.cast<FMixItemMsg>(),
      imageMixItemList: (result[1] as List<Object?>?)?.cast<FMixItemMsg>(),
    );
  }
}

class FMixItemMsg {
  FMixItemMsg({
    this.id,
    this.tag,
    this.text,
  });

  String? id;

  String? tag;

  String? text;

  Object encode() {
    return <Object?>[
      id,
      tag,
      text,
    ];
  }

  static FMixItemMsg decode(Object result) {
    result as List<Object?>;
    return FMixItemMsg(
      id: result[0] as String?,
      tag: result[1] as String?,
      text: result[2] as String?,
    );
  }
}

class FResourceMsg {
  FResourceMsg({
    this.id,
    this.srcType,
    this.loadType,
    this.tag,
    this.bitmapByte,
    this.text,
  });

  String? id;

  String? srcType;

  String? loadType;

  String? tag;

  Uint8List? bitmapByte;

  String? text;

  Object encode() {
    return <Object?>[
      id,
      srcType,
      loadType,
      tag,
      bitmapByte,
      text,
    ];
  }

  static FResourceMsg decode(Object result) {
    result as List<Object?>;
    return FResourceMsg(
      id: result[0] as String?,
      srcType: result[1] as String?,
      loadType: result[2] as String?,
      tag: result[3] as String?,
      bitmapByte: result[4] as Uint8List?,
      text: result[5] as String?,
    );
  }
}

class FTCEffectTextMsg {
  FTCEffectTextMsg({
    this.text,
    this.fontStyle,
    this.color,
    this.alignment,
    this.fontSize,
  });

  String? text;

  String? fontStyle;

  int? color;

  int? alignment;

  double? fontSize;

  Object encode() {
    return <Object?>[
      text,
      fontStyle,
      color,
      alignment,
      fontSize,
    ];
  }

  static FTCEffectTextMsg decode(Object result) {
    result as List<Object?>;
    return FTCEffectTextMsg(
      text: result[0] as String?,
      fontStyle: result[1] as String?,
      color: result[2] as int?,
      alignment: result[3] as int?,
      fontSize: result[4] as double?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is FTCEffectConfigMsg) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is FTCEffectAnimInfoMsg) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is FMixInfoMsg) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is FMixItemMsg) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is FResourceMsg) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is FTCEffectTextMsg) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return FTCEffectConfigMsg.decode(readValue(buffer)!);
      case 130: 
        return FTCEffectAnimInfoMsg.decode(readValue(buffer)!);
      case 131: 
        return FMixInfoMsg.decode(readValue(buffer)!);
      case 132: 
        return FMixItemMsg.decode(readValue(buffer)!);
      case 133: 
        return FResourceMsg.decode(readValue(buffer)!);
      case 134: 
        return FTCEffectTextMsg.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FTCMediaXBaseApi {
  /// Constructor for [FTCMediaXBaseApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FTCMediaXBaseApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setLicense(String url, String key) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLicense$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[url, key]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLogEnable(bool enable) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseApi.setLogEnable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[enable]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class FTCEffectAnimViewApi {
  /// Constructor for [FTCEffectAnimViewApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FTCEffectAnimViewApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<int> startPlay(String playUrl) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.startPlay$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playUrl]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<void> setVideoMode(int videoModeValue) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setVideoMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[videoModeValue]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setConfig(FTCEffectConfigMsg config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScaleType(int scaleTypeValue) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setScaleType$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[scaleTypeValue]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> requestUpdateResource() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.requestUpdateResource$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRenderRotation(int rotation) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRenderRotation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[rotation]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isPlaying() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.isPlaying$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> resume() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.resume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seekTo(int milliSec) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekTo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[milliSec]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seekProgress(double progress) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.seekProgress$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[progress]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLoop(bool isLoop) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[isLoop]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLoopCount(int loopCount) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setLoopCount$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[loopCount]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDuration(int durationInMilliSec) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setDuration$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[durationInMilliSec]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopPlay(bool clearLastFrame) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.stopPlay$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[clearLastFrame]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMute(bool mute) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setMute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[mute]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<FTCEffectAnimInfoMsg> getTCAnimInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.getTCAnimInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as FTCEffectAnimInfoMsg?)!;
    }
  }

  Future<void> onDestroy() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.onDestroy$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRate(double rate) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewApi.setRate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[rate]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class FTCMediaXBaseFlutterEvent {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onLicenseResult(int errCode, String msg);

  static void setUp(FTCMediaXBaseFlutterEvent? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_errCode = (args[0] as int?);
          assert(arg_errCode != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult was null, expected non-null int.');
          final String? arg_msg = (args[1] as String?);
          assert(arg_msg != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCMediaXBaseFlutterEvent.onLicenseResult was null, expected non-null String.');
          try {
            api.onLicenseResult(arg_errCode!, arg_msg!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

abstract class FTCEffectAnimViewFlutterEvent {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Uint8List? fetchImage(FResourceMsg res);

  FTCEffectTextMsg? fetchText(FResourceMsg res);

  void releaseResource(List<FResourceMsg> resourceList);

  void onResClick(FResourceMsg res);

  void onPlayStart();

  void onPlayEnd();

  void onPlayError(int errCode);

  void onPlayEvent(int event, Map<Object?, Object?> param);

  static void setUp(FTCEffectAnimViewFlutterEvent? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchImage$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchImage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FResourceMsg? arg_res = (args[0] as FResourceMsg?);
          assert(arg_res != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchImage was null, expected non-null FResourceMsg.');
          try {
            final Uint8List? output = api.fetchImage(arg_res!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchText$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchText was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FResourceMsg? arg_res = (args[0] as FResourceMsg?);
          assert(arg_res != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.fetchText was null, expected non-null FResourceMsg.');
          try {
            final FTCEffectTextMsg? output = api.fetchText(arg_res!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.releaseResource$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.releaseResource was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<FResourceMsg>? arg_resourceList = (args[0] as List<Object?>?)?.cast<FResourceMsg>();
          assert(arg_resourceList != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.releaseResource was null, expected non-null List<FResourceMsg>.');
          try {
            api.releaseResource(arg_resourceList!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onResClick$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onResClick was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FResourceMsg? arg_res = (args[0] as FResourceMsg?);
          assert(arg_res != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onResClick was null, expected non-null FResourceMsg.');
          try {
            api.onResClick(arg_res!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayStart$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onPlayStart();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEnd$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onPlayEnd();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_errCode = (args[0] as int?);
          assert(arg_errCode != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayError was null, expected non-null int.');
          try {
            api.onPlayError(arg_errCode!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_event = (args[0] as int?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent was null, expected non-null int.');
          final Map<Object?, Object?>? arg_param = (args[1] as Map<Object?, Object?>?);
          assert(arg_param != null,
              'Argument for dev.flutter.pigeon.flutter_effect_player.FTCEffectAnimViewFlutterEvent.onPlayEvent was null, expected non-null Map<Object?, Object?>.');
          try {
            api.onPlayEvent(arg_event!, arg_param!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
